{"version":3,"sources":["theme/Colors.js","components/Contact/index.tsx","components/AddInput/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Colors","ContactContainer","styled","div","_templateObject","props","opacity","ContactName","_templateObject2","LastInteraction","_templateObject3","Contact","_ref","contact","onClick","react_default","a","createElement","name","interactions","repeat","length","distanceInWordsToNow","Date","Container","AddInput_templateObject","Input","input","AddInput_templateObject2","AddInput","newContact","inputEl","useRef","ref","type","onKeyUp","e","keyCode","current","value","PageContainer","App_templateObject","AppContainer","App_templateObject2","ContactGrid","App_templateObject3","CTA","_templateObject4","App","_useState","useState","_useState2","Object","slicedToArray","contacts","setContacts","useEffect","rawStorageValue","localStorage","getItem","initialState","JSON","parse","map","index","components_Contact","clickedContact","contactIndex","findIndex","c","id","splice","updatedContacts","concat","toConsumableArray","objectSpread","toISOString","setItem","stringify","components_AddInput","uuidv4","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff99b906.chunk.js","sourcesContent":["export const Colors = {\n  primary: \"#353535\",\n  secondary: \"#C8CACA\",\n  accent: \"#F2E39B\",\n  selection: \"#DDD3A5\",\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { distanceInWordsToNow } from \"date-fns\";\nimport { Colors } from \"../../theme\";\n\nconst ContactContainer = styled.div<{ opacity: number }>`\n  display: flex;\n  flex-direction: row;\n  align-items:center;\n  opacity: ${props => props.opacity}\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst ContactName = styled.div`\n  text-transform: uppercase;\n  font-size: 2em;\n  font-weight: bold;\n  font-family: \"Roboto Mono\", monospace;\n  color: ${Colors.primary};\n  border-radius: 0.125em;\n  padding: 0 0.5em;\n\n  &:hover {\n    cursor: pointer;\n    opacity: 1;\n    background-color: ${Colors.accent};\n  }\n`;\n\nconst LastInteraction = styled.div`\n  text-transform: uppercase;\n  font-size: 0.9em;\n  font-family: \"Roboto Mono\", monospace;\n  padding: 0 0.5em;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport interface IContact {\n  name: string;\n  id: string;\n  interactions: string[];\n}\n\nconst Contact: React.FC<{\n  contact: IContact;\n  opacity: number;\n  onClick: (contact: IContact) => void;\n}> = ({ contact, onClick, opacity }) => (\n  <ContactContainer onClick={() => onClick(contact)} opacity={opacity}>\n    <ContactName>{contact.name}</ContactName>\n    {contact.interactions && contact.interactions[0] && (\n      <LastInteraction>\n        <div>{\"Ã—\".repeat(contact.interactions.length)}</div>\n        <div>{distanceInWordsToNow(new Date(contact.interactions[0]))} AGO</div>\n      </LastInteraction>\n    )}\n  </ContactContainer>\n);\n\nexport default Contact;\n","import React, { useRef, useEffect } from \"react\";\nimport { Colors } from \"../../theme\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  border: 1px solid ${Colors.accent};\n  border-radius: 0.125em;\n  heigth: 2em;\n  padding: 0.5em;\n`;\n\nconst Input = styled.input`\n  border: none;\n  background-image: none;\n  background-color: transparent;\n  box-shadow: none;\n  font-size: 2em;\n  text-transform: uppercase;\n  font-size: 2em;\n  font-weight: bold;\n  font-family: \"Roboto Mono\", monospace;\n  color: ${Colors.primary}\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const AddInput: React.FC<{\n  newContact: (name: string) => void;\n}> = ({ newContact }) => {\n  const inputEl = useRef<HTMLInputElement>(null);\n\n  return (\n    <Container>\n      <Input\n        ref={inputEl}\n        type=\"text\"\n        onKeyUp={e => {\n          if (e.keyCode === 13) {\n            // Enter\n            if (inputEl.current && inputEl.current.value !== \"\") {\n              newContact(inputEl.current.value);\n              inputEl.current.value = \"\";\n            }\n          }\n        }}\n      />\n    </Container>\n  );\n};\n\nexport default AddInput;\n","import React, { useState, useEffect } from \"react\";\nimport { Colors } from \"./theme\";\nimport Contact, { IContact } from \"./components/Contact\";\nimport AddInput from \"./components/AddInput\";\nimport uuidv4 from \"uuid/v4\";\nimport \"./App.css\";\n\nimport styled from \"styled-components\";\n\nconst PageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: white;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: white;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 2em 0em;\n\n  height: 100vh;\n`;\n\nconst ContactGrid = styled.div`\n  display: flex;\n  flex-direction: column;\n  & > * {\n    padding: 0.25em 0;\n  }\n\n  & > div:first-child {\n    padding: 0 0 1em 0;\n  }\n`;\n\nconst CTA = styled.div`\n  text-transform: uppercase;\n  font-size: 2em;\n  margin-bottom: 0.5em;\n  font-family: \"Roboto Mono\", monospace;\n  color: ${Colors.primary};\n`;\n\nconst LOCALSTORAGE_KEY = \"atem.io/loop\";\n\nconst App: React.FC = () => {\n  const [contacts, setContacts] = useState<IContact[]>([]);\n\n  useEffect(() => {\n    const rawStorageValue = localStorage.getItem(LOCALSTORAGE_KEY);\n    if (rawStorageValue) {\n      const initialState = JSON.parse(rawStorageValue);\n      if (initialState) {\n        setContacts(initialState);\n      }\n    }\n  }, []);\n\n  return (\n    <PageContainer>\n      <AppContainer>\n        {contacts.length > 0 && (\n          <div>\n            <CTA>I should say `Hi ðŸ‘‹` to:</CTA>\n            <ContactGrid>\n              {contacts.map((contact, index) => (\n                <Contact\n                  opacity={1 - index / contacts.length}\n                  contact={contact}\n                  onClick={clickedContact => {\n                    const contactIndex = contacts.findIndex(\n                      c => c.id === clickedContact.id\n                    );\n                    if (contactIndex !== -1) {\n                      contacts.splice(contactIndex, 1);\n\n                      const { interactions } = clickedContact;\n                      const updatedContacts = [\n                        ...contacts,\n                        {\n                          ...clickedContact,\n                          interactions: [\n                            new Date().toISOString(),\n                            ...interactions\n                          ]\n                        }\n                      ];\n                      setContacts(updatedContacts);\n                      localStorage.setItem(\n                        LOCALSTORAGE_KEY,\n                        JSON.stringify(updatedContacts)\n                      );\n                    }\n                  }}\n                />\n              ))}\n            </ContactGrid>\n          </div>\n        )}\n        <div>\n          <CTA>Add Someone:</CTA>\n          <AddInput\n            newContact={name =>\n              setContacts([\n                { name, id: uuidv4(), interactions: [] },\n                ...contacts\n              ])\n            }\n          />\n        </div>\n      </AppContainer>\n    </PageContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}